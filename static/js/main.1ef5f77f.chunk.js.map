{"version":3,"sources":["constants.js","components/login.js","components/products.js","App.js","serviceWorker.js","index.js"],"names":["url","mainUrl","Login","props","React","useState","login","setLogin","password","setPassword","error","showError","className","name","type","onChange","e","target","value","onClick","request","l","p","then","user","localStorage","auth","logIn","Products","products","setProducts","useEffect","GraphQLClient","headers","Authorization","data","GoodFind","length","map","product","key","_id","price","description","src","images","App","isUser","setUser","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mNAAaA,G,MAAM,qDACNC,EAAU,6C,OCGR,SAASC,EAAMC,GAAQ,IAAD,EACTC,IAAMC,SAAS,IADN,mBAC5BC,EAD4B,KACrBC,EADqB,OAEHH,IAAMC,SAAS,IAFZ,mBAE5BG,EAF4B,KAElBC,EAFkB,OAGRL,IAAMC,SAAS,MAHP,mBAG5BK,EAH4B,KAGrBC,EAHqB,KA+BnC,OACI,yBAAKC,UAAU,SACb,4BAAQA,UAAU,iBACdF,EACE,8BAAOA,GACP,gDAEN,yBAAKE,UAAU,oBACb,2BACIC,KAAK,QACLC,KAAK,OACLC,SArCc,SAACC,GACzBT,EAASS,EAAEC,OAAOC,WAsCd,yBAAKN,UAAU,oBACb,2BACIC,KAAK,WACLC,KAAK,WACLC,SAxCa,SAACC,GACxBP,EAAYO,EAAEC,OAAOC,WAyCjB,yBAAKN,UAAU,oBACb,yBAAKA,UAAU,aAAaO,QAvClB,WAKhBC,kBAASpB,EAJE,8EAIU,CACnBqB,EAAGf,EACHgB,EAAGd,IACFe,MAAK,SAAAC,GACHA,EAAKlB,OACNmB,aAAaC,KAAOF,EAAKlB,MACzBH,EAAMwB,SAENhB,EAAU,gCA0BR,YCnDK,SAASiB,EAASzB,GAAQ,IAAD,EACNC,IAAMC,SAAS,IADT,mBAC/BwB,EAD+B,KACrBC,EADqB,KA6CtC,OA1CE1B,IAAM2B,WAAW,WAmBE,IAAIC,gBAAehC,EAAK,CACnCiC,QAAS,CACLC,cAAc,UAAD,OAAYT,aAAaC,SAcvCN,QAVI,2MAUWG,MAAK,SAAAY,GACvBL,EAAYK,EAAKC,eAGtB,IAID,yBAAKxB,UAAU,WACViB,EAASQ,OAAS,EAAIR,EAASS,KAAI,SAAAC,GAAO,OACvC,yBAAKC,IAAKD,EAAQE,IAAK7B,UAAU,iBAC7B,yBAAKA,UAAU,kBAAkB2B,EAAQ1B,KAAO,KAChD,0BAAMD,UAAU,kBAAhB,IAAmC2B,EAAQG,OAC3C,yBAAK9B,UAAU,iBAAiB2B,EAAQI,aACxC,yBACIC,IAAKL,EAAQM,OAAS5C,EAAUsC,EAAQM,OAAO,GAAG7C,IAAM,wBACxDY,UAAU,qBAEjB,cCpCAkC,MAjBf,WAAgB,IAAD,EACa1C,IAAMC,UAAS,GAD5B,mBACN0C,EADM,KACEC,EADF,KAOb,OACE,0BAAMpC,UAAU,WACd,4BAAQA,UAAU,UAAlB,gBAAwC,sCAAxC,KACEmC,EACE,kBAACnB,EAAD,MACA,kBAAC1B,EAAD,CAAOyB,MATD,WACZqB,GAAQ,QCCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,iB","file":"static/js/main.1ef5f77f.chunk.js","sourcesContent":["export const url = 'http://shop-roles.asmer.fs.a-level.com.ua/graphql'\nexport const mainUrl = 'http://shop-roles.asmer.fs.a-level.com.ua/'","import React from 'react';\nimport { url } from '../constants'\nimport { request } from 'graphql-request'\n\nexport default function Login(props) {\n  const [login, setLogin] = React.useState('')\n  const [password, setPassword] = React.useState('')\n  const [error, showError] = React.useState(null)\n\n  const handleLoginChange = (e) => {\n    setLogin(e.target.value)\n  }\n  const handlePassChange = (e) => {\n    setPassword(e.target.value)\n  }\n\n  const authorize = () => {\n    const query = `query log($l:String, $p:String){\n      login(login:$l, password:$p)\n    }`\n\n    request( url, query, {\n      l: login,\n      p: password\n    }).then(user => {\n      if(user.login) {\n        localStorage.auth = user.login\n        props.logIn()\n      } else {\n        showError('Wrong Login or Password')\n      }\n    })\n\n  }\n\n  return (\n      <div className=\"login\">\n        <header className=\"login__header\">\n          { error ?\n              <span>{error}</span> :\n              <span>Please, login</span> }\n        </header>\n        <div className=\"login__input-box\">\n          <input\n              name=\"login\"\n              type=\"text\"\n              onChange={handleLoginChange}/>\n        </div>\n        <div className=\"login__input-box\">\n          <input\n              name=\"password\"\n              type=\"password\"\n              onChange={handlePassChange}/>\n        </div>\n        <div className=\"login__input-box\">\n          <div className=\"login__btn\" onClick={authorize}>Log In</div>\n        </div>\n      </div>\n  );\n}\n","import React from 'react';\nimport { url, mainUrl } from '../constants'\nimport { request, GraphQLClient } from 'graphql-request'\n\nexport default function Products(props) {\n  const [products, setProducts] = React.useState([])\n\n    React.useEffect( () => {\n        // fetch(url, {\n        //     method: 'POST',\n        //     headers: {\n        //         'Content-Type': 'application/json',\n        //         'Accept': 'application/json',\n        //         'Authorization': `Bearer ${localStorage.auth}`\n        //     },\n        //     body: JSON.stringify({\n        //         query\n        //     })\n        // })\n        //\n        //     .then(data => data.json())\n        //     .then(\n        //         data => {\n        //             console.log(data)\n        //         })\n\n        const client = new GraphQLClient( url, {\n            headers: {\n                Authorization: `Bearer ${localStorage.auth}`,\n            },\n        })\n\n        const query = `query {\n          GoodFind(query:\"[{}]\"){\n                _id\n                name\n                description\n                price\n                images {url}\n              }\n            }`\n\n        client.request(query).then(data => {\n            setProducts(data.GoodFind)\n        })\n\n    }, [])\n\n\n  return (\n      <div className=\"product\">\n          {products.length > 0 ? products.map(product => (\n              <div key={product._id} className=\"product__item\">\n                  <div className=\"product__title\">{product.name + ' '}</div>\n                  <span className=\"product__price\">${product.price}</span>\n                  <div className=\"product__desc\">{product.description}</div>\n                  <img\n                      src={product.images ? mainUrl + product.images[0].url : './default_product.jpg'}\n                      className=\"product__img\"/>\n              </div>\n          )) : 'loading...'}\n      </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Login from './components/login'\nimport Products from './components/products'\n\n\n\nfunction App() {\n  const [isUser, setUser] = React.useState(false);\n\n  const logIn = () => {\n    setUser(true)\n  }\n\n  return (\n    <main className=\"wrapper\">\n      <header className=\"header\"> Wellcome to <b>My Shop</b> </header>\n      { isUser ?\n          <Products /> :\n          <Login logIn={logIn}/> }\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}